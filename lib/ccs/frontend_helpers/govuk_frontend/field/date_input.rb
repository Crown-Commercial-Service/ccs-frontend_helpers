# frozen_string_literal: true

require_relative '../field'
require_relative 'input'

module CCS
  module FrontendHelpers
    module GovUKFrontend
      module Field
        # = GOV.UK Date Input
        #
        # This helper is used for generating the date input component from the
        # {https://design-system.service.gov.uk/components/date-input GDS - Components -  Date Input}
        #
        # This is considered a Field module and so makes use of the methods in {CCS::FrontendHelpers::GovUKFrontend::Field}

        module DateInput
          include Field
          include Input

          # Generates the HTML for the GOV.UK date input component
          #
          # @param attribute [String, Symbol] the attribute of the date input
          # @param govuk_date_input_options [Hash] options that will be used for the parts of the fieldset, form group, hint and date input
          #
          # @option govuk_date_input_options [String] :error_message (nil) the error message to be displayed
          # @option govuk_date_input_options [ActiveModel] :model (nil) optional model that can be used to find an error message
          # @option govuk_date_input_options [ActionView::Helpers::FormBuilder] :form (nil) optional form builder used to create
          #                                                                           the date tag and find the error message
          # @option govuk_date_input_options [Hash] :form_group see {govuk_fields}
          # @option govuk_date_input_options [Hash] :fieldset see {govuk_fields}
          # @option govuk_date_input_options [Hash] :hint see {govuk_field}
          # @option govuk_date_input_options [Hash] :date_input_options ({}) the options that will be used when rendering the date input.
          #                                                                  See {_govuk_date_input_fields} for more details.
          #
          # @return [ActiveSupport::SafeBuffer] the HTML for the GOV.UK Date Input
          #                                     which can then be rendered on the page

          def govuk_date_input(attribute, **govuk_date_input_options)
            set_govuk_date_input_fieldset_options(**govuk_date_input_options)

            govuk_fields(:date_input, attribute, **govuk_date_input_options) do |govuk_field_options, error_message|
              concat(_govuk_date_input_fields(attribute, error_message, **govuk_field_options) do |date_item_attribute, date_item_input_options|
                govuk_input(
                  date_item_attribute,
                  model: govuk_date_input_options[:model],
                  form: govuk_date_input_options[:form],
                  **date_item_input_options
                )
              end)
            end
          end

          private

          # Sets the role for the fieldset to group
          #
          # @param govuk_date_input_options [Hash] options that will be used for the parts of the fieldset, form group, hint and date input

          def set_govuk_date_input_fieldset_options(**govuk_date_input_options)
            (govuk_date_input_options[:fieldset][:attributes] ||= {})[:role] = 'group'
          end

          # Wrapper method used by {govuk_date_input} to generate the date inputs HTML
          #
          # @param attribute [String, Symbol] the attribute of the date input
          # @param any_errors [Boolean] flag to indicate if the inputs need the error class
          # @param govuk_date_input_options [Hash] options that will be used in customising the HTML
          #
          # @option govuk_date_input_options [String] :classes additional CSS classes for the date inputs HTML
          # @option govuk_date_input_options [Array] :date_items an array of the date items that will be rendered.
          #                                                     Each date item hash must contain the +:name+ to add as suffix to attribute.
          #                                                     Anything else in the hash will be used as options in a {govuk_input}.
          # @option govuk_date_input_options [Hash] :attributes ({}) any additional attributes that will added as part of the HTML
          #
          # @yield the date input item HTML generated by the parent method
          #
          # @yieldparam date_item_attribute [String] the attribute for individual date input
          # @yieldparam date_item_input_options [Hash] the HTML options used for the date input item
          #
          # @return [ActiveSupport::SafeBuffer] the HTML for the date inputs which is used in {govuk_date_input}

          def _govuk_date_input_fields(attribute, any_errors, **govuk_date_input_options)
            initialise_attributes_and_set_classes(govuk_date_input_options, 'govuk-date-input')

            date_items = govuk_date_input_options[:date_items] || govuk_default_date_items

            tag.div(**govuk_date_input_options[:attributes]) do
              enumerate_and_set_date_input_options(date_items, any_errors) do |date_item_input_options|
                concat(tag.div(class: 'govuk-date-input__item') do
                  concat(yield("#{attribute}_#{date_item_input_options[:name]}", date_item_input_options))
                end)
              end
            end
          end

          # rubocop:disable Metrics/CyclomaticComplexity

          # Enumerates and inititalises the attributes of each date input item and is used by {_govuk_date_input_fields}
          #
          # @param date_items [Array] an array of the date item hashes that will be inititalised
          # @param any_errors [Boolean] flag to indicate if the inputs need the error class
          #
          # @yield the date input item HTML generated by teach date input item
          #
          # @yieldparam date_item_input_options [Hash] the HTML options used for the date input item

          def enumerate_and_set_date_input_options(date_items, any_errors)
            date_items.each do |date_item_input_options|
              (date_item_input_options[:input] ||= {})[:attributes] ||= {}

              date_item_input_options[:input][:classes] = "govuk-date-input__input #{date_item_input_options[:input][:classes]} #{'govuk-input--error' if any_errors}".rstrip

              date_item_input_options[:input][:attributes][:inputmode] ||= 'numeric'

              date_item_input_options[:label] ||= {}
              date_item_input_options[:label][:text] ||= date_item_input_options[:name].capitalize
              date_item_input_options[:label][:classes] = 'govuk-date-input__label'

              yield(date_item_input_options)
            end
          end
          # rubocop:enable Metrics/CyclomaticComplexity

          # The default date items used in {_govuk_date_input_fields} if no date items are provided

          def govuk_default_date_items
            [
              {
                name: 'day',
                input: {
                  classes: 'govuk-input--width-2'
                }
              },
              {
                name: 'month',
                input: {
                  classes: 'govuk-input--width-2'
                }
              },
              {
                name: 'year',
                input: {
                  classes: 'govuk-input--width-4'
                }
              }
            ]
          end
        end
      end
    end
  end
end
